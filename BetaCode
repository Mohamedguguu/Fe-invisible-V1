--// Button position and size variables
local buttonSize = UDim2.new(0, 50, 0, 50)
local buttonPosition = UDim2.new(1, -120, 0, 10)

local invis_on = false
local VOID_Y = -50 -- Adjust as needed for your map's lowest point
local SAFE_SPAWN = Vector3.new(0, 100, 0) -- Safe point if player falls into void
local lastDeathCause = "Unknown"

--// Utility functions
local Players = game:GetService("Players")
local LocalPlayer = Players.LocalPlayer
local RunService = game:GetService("RunService")

local function notify(title, text)
    pcall(function()
        game.StarterGui:SetCore("SendNotification", {Title = title, Text = text or "", Duration = 2})
    end)
    print(title .. (text and (": " .. text) or ""))
end

local function safeGetCharacter()
    local character = LocalPlayer.Character or LocalPlayer.CharacterAdded:Wait()
    return character
end

local function setCharacterTransparency(transparency)
    local character = LocalPlayer.Character
    if not character then
        warn("Character not found.")
        notify("Error", "Character missing.")
        return false
    end
    for _, part in ipairs(character:GetDescendants()) do
        if part:IsA("BasePart") and part.Name ~= "HumanoidRootPart" then
            part.Transparency = transparency
        end
    end
    return true
end

--// Create UI Button
local screenGui = Instance.new("ScreenGui")
screenGui.Parent = LocalPlayer:WaitForChild("PlayerGui")

local invisButton = Instance.new("TextButton")
invisButton.Parent = screenGui
invisButton.Size = buttonSize
invisButton.Position = buttonPosition
invisButton.Text = ""
invisButton.BackgroundColor3 = Color3.fromRGB(0, 0, 0)
invisButton.BackgroundTransparency = 0.5
invisButton.BorderSizePixel = 0
invisButton.Name = "InvisButton"
invisButton.ClipsDescendants = true
invisButton.AutoButtonColor = false
local uicorner = Instance.new("UICorner", invisButton)
uicorner.CornerRadius = UDim.new(1, 0)

--// Invisibility Logic
local function clearInvisChair()
    if workspace:FindFirstChild("invischair") then
        workspace.invischair:Destroy()
    end
end

local function toggleInvisibility()
    local character = LocalPlayer.Character
    local hrp = character and character:FindFirstChild("HumanoidRootPart")
    if not character or not hrp then
        warn("Character or HRP missing.")
        notify("Error", "Character or HRP missing.")
        return
    end

    invis_on = not invis_on

    if invis_on then
        if not setCharacterTransparency(0.5) then return end
        local savedpos = hrp.CFrame
        hrp.CFrame = CFrame.new(-25.95, 84, 3537.55)
        task.wait(0.15)
        local Seat = Instance.new('Seat')
        Seat.Anchored = false
        Seat.CanCollide = false
        Seat.Name = 'invischair'
        Seat.Transparency = 1
        Seat.Position = Vector3.new(-25.95, 84, 3537.55)
        Seat.Parent = workspace
        local torso = character:FindFirstChild("Torso") or character:FindFirstChild("UpperTorso")
        if not torso then
            warn("No Torso/UpperTorso found.")
            notify("Error", "No Torso/UpperTorso found.")
            return
        end
        local Weld = Instance.new("Weld")
        Weld.Part0 = Seat
        Weld.Part1 = torso
        Weld.Parent = Seat
        hrp.CFrame = savedpos
        notify("Invis On", "worked")
    else
        if not setCharacterTransparency(0) then return end
        clearInvisChair()
        notify("Invis Off", "worked")
    end
end

invisButton.MouseButton1Click:Connect(function()
    local success, err = pcall(toggleInvisibility)
    if not success then
        warn("Error toggling invisibility:", err)
        notify("Error", "Script error occurred.")
    end
end)

--// Prevent player from falling into the void
RunService.RenderStepped:Connect(function()
    local character = LocalPlayer.Character
    local hrp = character and character:FindFirstChild("HumanoidRootPart")
    if character and hrp and hrp.Position.Y < VOID_Y then
        lastDeathCause = "Fell into void"
        hrp.CFrame = CFrame.new(SAFE_SPAWN)
        notify("Recovered", "Player teleported to safety!")
    end
end)

--// Death & Respawn Handlers
local function onDeath()
    local humanoid = LocalPlayer.Character and LocalPlayer.Character:FindFirstChildOfClass("Humanoid")
    if humanoid then
        local deadType = humanoid:GetState() == Enum.HumanoidStateType.Physics and "Physics" or humanoid:GetState().Name
        if lastDeathCause == "Fell into void" then
            print("Player died to void.")
            notify("Death", "You fell into the void!")
        elseif humanoid.Health == 0 then
            print("Player died: Health reached zero (" .. deadType .. ")")
            notify("Death", "You died (" .. deadType .. ")")
        else
            print("Player died: Unknown cause.")
            notify("Death", "Unknown cause.")
        end
    end
    clearInvisChair()
    invis_on = false
end

local function setupDeathListener()
    local character = safeGetCharacter()
    local humanoid = character:FindFirstChildOfClass("Humanoid")
    if humanoid then
        humanoid.Died:Connect(onDeath)
    end
end

LocalPlayer.CharacterAdded:Connect(function(char)
    task.wait(0.1)
    setupDeathListener()
    -- restore invis state after respawn, if desired
    if invis_on then
        setCharacterTransparency(0.5)
        notify("Info", "Invisibility restored after respawn.")
    end
end)

--// Initial setup
setupDeathListener()
