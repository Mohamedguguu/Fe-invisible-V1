--[[
  Invisible V1 Script by Mohamed - ULTIMATE EDITION
  - Duplicate prevention
  - Advanced error/UNC checking
  - Fake character when invisible
  - Noclip (N) and Speed (B) toggles (with original speed restore)
  - Keybinds configurable via UI
  - All UI draggable, robust, safe
  - All actions give notifications, bug-proofed
--]]

-- SINGLETON: Prevent re-execution
if getgenv and getgenv().InvisibleScriptRunning then
    pcall(function()
        game.StarterGui:SetCore("SendNotification", {
            Title = "Script Already Running";
            Text = "This script is already running!";
            Duration = 3;
        })
    end)
    warn("Invisible script is already running. Aborting duplicate execution.")
    return
elseif getgenv then
    getgenv().InvisibleScriptRunning = true
end

--// Settings / Defaults
local VOID_Y = -50
local SAFE_SPAWN = Vector3.new(0, 100, 0)
local INVIS_POSITION = Vector3.new(-25.95, 84, 3537.55)
local DEFAULT_KEY_INVIS = "Z"
local DEFAULT_KEY_NOCLIP = "N"
local DEFAULT_KEY_SPEED = "B"
local DEFAULT_SPEED = 16

--// Services UNC Checker
local function getService(name)
    local s
    pcall(function() s = game:GetService(name) end)
    return s
end

local Players = getService("Players")
local RunService = getService("RunService")
local UserInputService = getService("UserInputService")
local StarterGui = getService("StarterGui")

if not Players or not RunService or not UserInputService or not StarterGui then
    warn("UNC Check Failed: Missing core Roblox services.")
    return
end

local LocalPlayer = Players.LocalPlayer
if not LocalPlayer then
    warn("UNC Check Failed: No LocalPlayer found.")
    return
end

--// UI Setup
local screenGui = Instance.new("ScreenGui")
screenGui.Parent = LocalPlayer:WaitForChild("PlayerGui")
screenGui.Name = "InvisibleV1Gui"
screenGui.ZIndexBehavior = Enum.ZIndexBehavior.Sibling

local mainFrame = Instance.new("Frame")
mainFrame.Name = "DragFrame"
mainFrame.Size = UDim2.new(0, 120, 0, 230)
mainFrame.Position = UDim2.new(1, -180, 0, 5)
mainFrame.BackgroundTransparency = 0.2
mainFrame.BackgroundColor3 = Color3.fromRGB(20, 20, 20)
mainFrame.Active = true
mainFrame.Parent = screenGui

local function addUICorner(obj, rad)
    local c = Instance.new("UICorner")
    c.CornerRadius = UDim.new(0, rad or 8)
    c.Parent = obj
    return c
end

addUICorner(mainFrame, 10)

-- Drag logic (modern)
do
    local dragging, dragInput, dragStart, startPos
    mainFrame.InputBegan:Connect(function(input)
        if input.UserInputType == Enum.UserInputType.MouseButton1 or
           input.UserInputType == Enum.UserInputType.Touch then
            dragging = true
            dragStart = input.Position
            startPos = mainFrame.Position
            input.Changed:Connect(function()
                if input.UserInputState == Enum.UserInputState.End then
                    dragging = false
                end
            end)
        end
    end)
    mainFrame.InputChanged:Connect(function(input)
        if dragging and (input.UserInputType == Enum.UserInputType.MouseMovement or
            input.UserInputType == Enum.UserInputType.Touch) then
            local delta = input.Position - dragStart
            mainFrame.Position = UDim2.new(
                startPos.X.Scale, startPos.X.Offset + delta.X,
                startPos.Y.Scale, startPos.Y.Offset + delta.Y
            )
        end
    end)
end

--// Notification helper
local function notify(title, text)
    pcall(function()
        StarterGui:SetCore("SendNotification", {Title = title, Text = text or "", Duration = 2})
    end)
    print(title .. (text and (": " .. text) or ""))
end

--// UI Elements
local function makeButton(parent, text, posY)
    local btn = Instance.new("TextButton")
    btn.Parent = parent
    btn.Size = UDim2.new(0, 50, 0, 50)
    btn.Position = UDim2.new(0.5, -25, 0, posY)
    btn.Text = text or ""
    btn.BackgroundColor3 = Color3.fromRGB(0, 0, 0)
    btn.BackgroundTransparency = 0.5
    btn.BorderSizePixel = 0
    btn.Name = "Btn_"..(text or "Button")
    btn.ClipsDescendants = true
    btn.AutoButtonColor = false
    addUICorner(btn, 25)
    return btn
end

local function makeLabel(parent, text, posY)
    local lbl = Instance.new("TextLabel")
    lbl.Parent = parent
    lbl.Size = UDim2.new(1, -10, 0, 18)
    lbl.Position = UDim2.new(0, 5, 0, posY)
    lbl.Text = text
    lbl.Font = Enum.Font.GothamSemibold
    lbl.TextSize = 14
    lbl.TextColor3 = Color3.fromRGB(220,220,220)
    lbl.BackgroundTransparency = 1
    return lbl
end

local function makeTextBox(parent, text, posY)
    local box = Instance.new("TextBox")
    box.Parent = parent
    box.Size = UDim2.new(1, -10, 0, 20)
    box.Position = UDim2.new(0, 5, 0, posY)
    box.BackgroundColor3 = Color3.fromRGB(30,30,30)
    box.TextColor3 = Color3.fromRGB(220,220,220)
    box.Text = text or ""
    box.PlaceholderText = "Key..."
    box.Font = Enum.Font.Gotham
    box.TextSize = 14
    box.ClearTextOnFocus = false
    addUICorner(box, 6)
    return box
end

-- Invisibility Button/UI
local invisButton = makeButton(mainFrame, "ðŸ‘»", 5)
local invisLabel = makeLabel(mainFrame, "Keybind Invis:", 60)
local invisBox = makeTextBox(mainFrame, DEFAULT_KEY_INVIS, 80)

-- Noclip Button/UI
local noclipButton = makeButton(mainFrame, "ðŸšª", 105)
local noclipLabel = makeLabel(mainFrame, "Keybind Noclip:", 160)
local noclipBox = makeTextBox(mainFrame, DEFAULT_KEY_NOCLIP, 180)

-- Speed Button/UI
local speedButton = makeButton(mainFrame, "âš¡", 155)
local speedLabel = makeLabel(mainFrame, "Keybind Speed:", 210)
local speedBox = makeTextBox(mainFrame, DEFAULT_KEY_SPEED, 230)

mainFrame.Size = UDim2.new(0, 120, 0, 260) -- Make sure everything fits

--// Keybind logic
local currentKeyInvis = DEFAULT_KEY_INVIS
local currentKeyNoclip = DEFAULT_KEY_NOCLIP
local currentKeySpeed = DEFAULT_KEY_SPEED

local function isValidKey(str)
    if #str == 1 then return true end
    for _, v in pairs(Enum.KeyCode:GetEnumItems()) do
        if v.Name:lower() == str:lower() then return true end
    end
    return false
end

invisBox.FocusLost:Connect(function(enter)
    local inputStr = invisBox.Text
    if isValidKey(inputStr) then
        currentKeyInvis = inputStr:upper()
        notify("Keybind Changed", "Invisible: " .. currentKeyInvis)
    else
        notify("Invalid Key", "Please enter a valid key (e.g. Z, X, Q, etc.)")
        invisBox.Text = currentKeyInvis
    end
end)
noclipBox.FocusLost:Connect(function(enter)
    local inputStr = noclipBox.Text
    if isValidKey(inputStr) then
        currentKeyNoclip = inputStr:upper()
        notify("Keybind Changed", "Noclip: " .. currentKeyNoclip)
    else
        notify("Invalid Key", "Please enter a valid key")
        noclipBox.Text = currentKeyNoclip
    end
end)
speedBox.FocusLost:Connect(function(enter)
    local inputStr = speedBox.Text
    if isValidKey(inputStr) then
        currentKeySpeed = inputStr:upper()
        notify("Keybind Changed", "Speed: " .. currentKeySpeed)
    else
        notify("Invalid Key", "Please enter a valid key")
        speedBox.Text = currentKeySpeed
    end
end)

--// Invisibility/Fake Character Logic
local invis_on = false
local fakeChar = nil

local function cloneFakeChar()
    if fakeChar then fakeChar:Destroy() end
    local char = LocalPlayer.Character
    if not char then return end
    fakeChar = char:Clone()
    fakeChar.Name = "FakeChar"
    for _, v in ipairs(fakeChar:GetDescendants()) do
        if v:IsA("BasePart") then
            v.Anchored = true
            v.CanCollide = false
        end
        if v:IsA("Humanoid") then
            v.DisplayDistanceType = Enum.HumanoidDisplayDistanceType.None
            v.Health = 0
        end
        if v:IsA("LocalScript") or v:IsA("Script") then
            v:Destroy()
        end
    end
    fakeChar.Parent = workspace
    local hrp = char:FindFirstChild("HumanoidRootPart")
    if hrp and fakeChar:FindFirstChild("HumanoidRootPart") then
        fakeChar.HumanoidRootPart.CFrame = hrp.CFrame
    end
end

local function removeFakeChar()
    if fakeChar then
        fakeChar:Destroy()
        fakeChar = nil
    end
end

local function setCharacterTransparency(transparency)
    local character = LocalPlayer.Character
    if not character then
        warn("Character not found.")
        notify("Error", "Character missing.")
        return false
    end
    for _, part in ipairs(character:GetDescendants()) do
        if part:IsA("BasePart") and part.Name ~= "HumanoidRootPart" then
            part.Transparency = transparency
        end
    end
    return true
end

local function clearInvisChair()
    if workspace:FindFirstChild("invischair") then
        workspace.invischair:Destroy()
    end
end

local function toggleInvisibility()
    local character = LocalPlayer.Character
    local hrp = character and character:FindFirstChild("HumanoidRootPart")
    if not character or not hrp then
        warn("Character or HRP missing.")
        notify("Error", "Character or HRP missing.")
        return
    end

    invis_on = not invis_on

    if invis_on then
        setCharacterTransparency(0.5)
        cloneFakeChar()
        local savedpos = hrp.CFrame
        hrp.CFrame = CFrame.new(INVIS_POSITION)
        task.wait(0.15)
        local Seat = Instance.new('Seat')
        Seat.Anchored = false
        Seat.CanCollide = false
        Seat.Name = 'invischair'
        Seat.Transparency = 1
        Seat.Position = INVIS_POSITION
        Seat.Parent = workspace
        local torso = character:FindFirstChild("Torso") or character:FindFirstChild("UpperTorso")
        if torso then
            local Weld = Instance.new("Weld")
            Weld.Part0 = Seat
            Weld.Part1 = torso
            Weld.Parent = Seat
        end
        hrp.CFrame = savedpos
        notify("Invis On", "worked (Fake character spawned)")
    else
        setCharacterTransparency(0)
        clearInvisChair()
        removeFakeChar()
        notify("Invis Off", "worked (Fake character removed)")
    end
end

--// Noclip Logic
local noclip_on = false
local function setNoclip(state)
    noclip_on = state
    if noclip_on then
        notify("Noclip Enabled", "You can walk through walls!")
    else
        notify("Noclip Disabled", "Normal physics restored.")
    end
end
RunService.Stepped:Connect(function()
    if noclip_on then
        local char = LocalPlayer.Character
        if char then
            for _, v in pairs(char:GetDescendants()) do
                if v:IsA("BasePart") then
                    v.CanCollide = false
                end
            end
        end
    end
end)

local function toggleNoclip()
    setNoclip(not noclip_on)
end

--// Speed Logic
local speed_on = false
local oldSpeed = DEFAULT_SPEED
local function setSpeed(state)
    local char = LocalPlayer.Character
    if not char then return end
    local humanoid = char:FindFirstChildOfClass("Humanoid")
    if not humanoid then return end

    if state then
        if not speed_on then oldSpeed = humanoid.WalkSpeed end
        humanoid.WalkSpeed = 30
        speed_on = true
        notify("Speed 30", "Run fast! (old speed saved)")
    else
        humanoid.WalkSpeed = oldSpeed
        speed_on = false
        notify("Speed Reset", "Old speed restored.")
    end
end
local function toggleSpeed()
    setSpeed(not speed_on)
end

--// Button Clicks
invisButton.MouseButton1Click:Connect(function() pcall(toggleInvisibility) end)
noclipButton.MouseButton1Click:Connect(function() pcall(toggleNoclip) end)
speedButton.MouseButton1Click:Connect(function() pcall(toggleSpeed) end)

--// Keybinds
UserInputService.InputBegan:Connect(function(input, processed)
    if processed then return end
    local k = input.KeyCode.Name:upper()
    if k == currentKeyInvis then pcall(toggleInvisibility) end
    if k == currentKeyNoclip then pcall(toggleNoclip) end
    if k == currentKeySpeed then pcall(toggleSpeed) end
end)

--// Prevent player from falling into the void
RunService.RenderStepped:Connect(function()
    local character = LocalPlayer.Character
    local hrp = character and character:FindFirstChild("HumanoidRootPart")
    if character and hrp and hrp.Position.Y < VOID_Y then
        hrp.CFrame = CFrame.new(SAFE_SPAWN)
        notify("Recovered", "Player teleported to safety!")
    end
end)

--// Death & Respawn Handlers
local function onDeath()
    clearInvisChair()
    removeFakeChar()
    invis_on = false
    setNoclip(false)
    setSpeed(false)
end

local function setupDeathListener()
    local character = LocalPlayer.Character or LocalPlayer.CharacterAdded:Wait()
    local humanoid = character:FindFirstChildOfClass("Humanoid")
    if humanoid then
        humanoid.Died:Connect(onDeath)
    end
end

Players.LocalPlayer.CharacterAdded:Connect(function(char)
    task.wait(0.1)
    setupDeathListener()
    if invis_on then
        setCharacterTransparency(0.5)
        notify("Info", "Invisibility restored after respawn.")
    end
end)
setupDeathListener()
