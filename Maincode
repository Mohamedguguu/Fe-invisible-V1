local buttonSize = UDim2.new(0, 55, 0, 55)
local buttonPosition = UDim2.new(0, 10, 0, 70)
local unloadButtonSize = UDim2.new(0, 55, 0, 55)
local unloadButtonPosition = UDim2.new(0, 70, 0, 70)
local methodButtonSize = UDim2.new(0, 55, 0, 55)
local methodButtonSpacingX = 70
local hideUIButtonSize = UDim2.new(0, 55, 0, 55)
local hideUIButtonPosition = UDim2.new(0, 130, 0, 70)
local loaderCommand = "!loadinvis"
local methodButtonYOffset = 60
local featureButtonYOffset = 60
local featureButtonSpacingX = 70
local moreWillComeLabelYOffset = 40
local moreWillComeLabelSize = UDim2.new(0, 180, 0, 25)
local buttonsFrameSize = UDim2.new(0, 270, 0, 300)
local buttonsFramePosition = UDim2.new(1, -310, 0, 20)
local buttonClickSoundId = "rbxassetid://232127604"
local seatAreaReturnEnabled = true
local seatAreaDistanceThreshold = 10

local DEBUG_MODE = true
local keybinds_enabled_state = true
local noclip_enabled = false


-- **[NEW] UI Text Sizes - Adjust these to control text size - INCREASED for Mobile, but SMALLER Button Text**
local buttonTextSize = 13
local labelTextSize = 14
local tooltipTextSize = 16
local textBoxTextSize = 14


-- Feature toggles
local invis_enabled = true
local fake_character_enabled = false
local walkspeed_boost_enabled = false
local originalCharacterColor = nil
local fakeCharacterModel = nil
local seatTeleportPosition = Vector3.new(-25.95, 84, 3537.55)
local currentSeatPosition = nil
local seatReturnHeartbeat = nil
local ghost_speed_enabled = false -- **[NEW] Ghost Speed State**
local voidLevelYThreshold = -50 -- **[NEW] Void Level Threshold**


-- Keybinds Configuration
local keybinds = {
    toggle_invis = Enum.KeyCode.Z,
    toggle_ui_hide = Enum.KeyCode.K,
    toggle_noclip = Enum.KeyCode.N,
    toggle_walkspeed_boost = Enum.KeyCode.B,
    load_ui = Enum.KeyCode.L,
}


--// don't edit script below - unless you are doing ;)
local invis_on = false
local current_method = 1
local ui_hidden = false
local screenGui = nil
local userInputService = game:GetService("UserInputService")
local Coregui = game:GetService("CoreGui")
local player = game.Players.LocalPlayer
local buttonClickSound = nil
local runService = game:GetService("RunService")
local method1_speed = 1
local generic_speed_value = 16
local InvisScriptLoaded = false


-- **Function to create and configure a tooltip**
local function createTooltip(parent, text, positionOffset, size, name)
    local tooltipLabel = Instance.new("TextLabel")
    tooltipLabel.Parent = parent
    tooltipLabel.BackgroundTransparency = 1
    tooltipLabel.TextColor3 = Color3.new(1, 1, 1)
    tooltipLabel.TextStrokeColor3 = Color3.new(0, 0, 0)
    tooltipLabel.TextStrokeTransparency = 0.5
    tooltipLabel.Font = Enum.Font.SourceSansBold
    tooltipLabel.TextSize = tooltipTextSize
    tooltipLabel.Position = positionOffset
    tooltipLabel.Size = size
    tooltipLabel.Visible = false
    tooltipLabel.TextXAlignment = "Center"
    tooltipLabel.TextYAlignment = "Center"
    tooltipLabel.Text = text
    tooltipLabel.Name = name
    return tooltipLabel
end


-- **Function to LOAD the UI and script (Loader Function)**
local function loadInvisUI()
    if InvisScriptLoaded then
        warn("Invis UI Script is already running! Aborting load.")
        game.StarterGui:SetCore("SendNotification", {
            Title = "Load Aborted";
            Duration = 2;
            Text = "Invis UI is already loaded.";
        })
        return
    end
    InvisScriptLoaded = true

    if screenGui then
        if DEBUG_MODE then print("LoadInvisUI: UI already exists, destroying old UI...") end
        screenGui:Destroy()
    end


    game.StarterGui:SetCore("SendNotification", {
        Title = "Loading Invis UI";
        Duration = 2;
        Text = "Creating and initializing UI elements...";
    })


    --// Create UI elements (UI creation code)
    screenGui = Instance.new("ScreenGui")
    screenGui.DisplayOrder = 10
    screenGui.ResetOnSpawn = false
    screenGui.Parent = Coregui
    screenGui.Name = "InvisScreenGui"
    screenGui.ZIndexBehavior = Enum.ZIndexBehavior.Sibling

    buttonClickSound = Instance.new("Sound")
    buttonClickSound.SoundId = buttonClickSoundId
    buttonClickSound.Volume = 0.5
    buttonClickSound.Parent = screenGui


    -- **Buttons Frame**
    local buttonsFrame = Instance.new("Frame")
    buttonsFrame.Parent = screenGui
    buttonsFrame.Name = "ButtonsFrame"
    buttonsFrame.Size = buttonsFrameSize
    buttonsFrame.Position = buttonsFramePosition
    buttonsFrame.BackgroundColor3 = Color3.fromRGB(50, 50, 50)
    buttonsFrame.BackgroundTransparency = 0.4
    buttonsFrame.BorderSizePixel = 0
    buttonsFrame.ClipsDescendants = true

    local uicorner_frame = Instance.new("UICorner")
    uicorner_frame.Parent = buttonsFrame
    uicorner_frame.CornerRadius = UDim.new(0.1, 0)


    -- **Button Creation**
    local buttons = {}

    local function createButton(buttonName, buttonText, clickFunction, tooltipText, extraTooltipConfig, parentFrame)
        local newButton = Instance.new("TextButton")
        newButton.Parent = parentFrame
        newButton.Name = buttonName
        newButton.Size = buttonSize
        newButton.Font = Enum.Font.SourceSansBold
        newButton.Text = buttonText
        newButton.TextColor3 = Color3.new(1, 1, 1)
        newButton.BackgroundColor3 = Color3.fromRGB(70, 70, 70)
        newButton.BackgroundTransparency = 0.5
        newButton.BorderSizePixel = 0
        newButton.AutoButtonColor = false
        newButton.ClipsDescendants = true
        newButton.TextSize = buttonTextSize

        newButton.MouseEnter:Connect(function() newButton.BackgroundColor3 = Color3.fromRGB(110, 110, 110) end)
        newButton.MouseLeave:Connect(function() newButton.BackgroundColor3 = Color3.fromRGB(70, 70, 70) end)
        newButton.MouseButton1Click:Connect(clickFunction)

        local uicorner = Instance.new("UICorner")
        uicorner.Parent = newButton
        uicorner.CornerRadius = UDim.new(0.5, 0)

        local tooltipLabel = createTooltip(screenGui, tooltipText, extraTooltipConfig.positionOffset, extraTooltipConfig.size, buttonName .. "Tooltip")
        newButton.MouseEnter:Connect(function() tooltipLabel.Visible = true end)
        newButton.MouseLeave:Connect(function() tooltipLabel.Visible = false end)

        return newButton
    end


    -- **Method 1 Speed Label**
    local method1SpeedLabel = Instance.new("TextLabel")
    method1SpeedLabel.Parent = buttonsFrame
    method1SpeedLabel.Name = "Method1SpeedLabel"
    method1SpeedLabel.Size = UDim2.new(0, 120, 0, 20)
    method1SpeedLabel.Position = UDim2.new(0, 10, 0, 10)
    method1SpeedLabel.Font = Enum.Font.SourceSansBold
    method1SpeedLabel.TextSize = labelTextSize
    method1SpeedLabel.TextXAlignment = "Left"
    method1SpeedLabel.Text = "Method 1 Speed:"
    method1SpeedLabel.BackgroundColor3 = Color3.fromRGB(50, 50, 50)
    method1SpeedLabel.BackgroundTransparency = 1
    method1SpeedLabel.TextColor3 = Color3.new(1, 1, 1)


    -- **Method 1 Speed Textbox**
    local speedTextBox = Instance.new("TextBox")
    speedTextBox.Parent = buttonsFrame
    speedTextBox.Name = "SpeedTextBox"
    speedTextBox.Size = UDim2.new(0, 60, 0, 25)
    speedTextBox.Position = UDim2.new(0, 10 + 120 + 5, 0, 7)
    speedTextBox.Font = Enum.Font.SourceSansBold
    speedTextBox.TextSize = textBoxTextSize
    speedTextBox.PlaceholderText = "Speed"
    speedTextBox.ClearTextOnFocus = false
    speedTextBox.BackgroundColor3 = Color3.fromRGB(60, 60, 60)
    speedTextBox.BackgroundTransparency = 0.5
    speedTextBox.TextColor3 = Color3.new(1, 1, 1)
    speedTextBox.BorderSizePixel = 0
    speedTextBox.ClipsDescendants = true
    speedTextBox.Text = tostring(method1_speed)


    -- **Invis Button**
    local invisButton = createButton(
        "InvisButton", "‚úÖ", toggleInvisibility,
        "Toggle Invisibility\n(Current Method: Seat)\nPress Z to toggle",
        {positionOffset = UDim2.new(1, buttonsFramePosition.X.Offset + buttonPosition.X.Offset, 0, buttonsFramePosition.Y.Offset + buttonPosition.Y.Offset + buttonSize.Y.Offset/2 + 35), size = UDim2.new(0, 200, 0, 50)},
        buttonsFrame
    )
    invisButton.Position = buttonPosition


    -- **Unload Button**
    local unloadButton = createButton(
        "UnloadButton", "‚ùå", unloadInvisUI,
        "Unload All & Reset\nClick to Remove EVERYTHING",
        {positionOffset = UDim2.new(1, buttonsFramePosition.X.Offset + buttonPosition.X.Offset, 0, buttonsFramePosition.Y.Offset + buttonPosition.Y.Offset + buttonSize.Y.Offset/2 + 35), size = UDim2.new(0, 220, 0, 40)},
        buttonsFrame
    )
    unloadButton.Position = unloadButtonPosition


    -- **Debug Button**
    local debugButton = createButton(
        "DebugButton", "üêõ", toggleDebugMode,
        "Toggle Debug Mode\nEnable/Disable Debug Prints\nCurrent: " .. (DEBUG_MODE and "Enabled" or "Disabled"),
        {positionOffset =  UDim2.new(1, buttonsFramePosition.X.Offset + buttonPosition.X.Offset, 0, buttonsFramePosition.Y.Offset + buttonPosition.Y.Offset + buttonSize.Y.Offset/2 + 35), size = UDim2.new(0, 180, 0, 40)},
        buttonsFrame
    )
    debugButton.Position = UDim2.new(0, 10, 0, 130)


    -- **Hide UI Button**
    local hideUIButton = createButton(
        "HideUIButton", "üëÅÔ∏è", toggleUIHide,
        "Hide/Show UI\nUI is now Enabled\nPress K to hide/show",
        {positionOffset = UDim2.new(1, buttonsFramePosition.X.Offset + buttonPosition.X.Offset, 0, buttonsFramePosition.Y.Offset + buttonPosition.Y.Offset + buttonSize.Y.Offset/2 + 35), size = UDim2.new(0, 200, 0, 40)},
        buttonsFrame
    )
    hideUIButton.Position = hideUIButtonPosition


    -- **Method 1 Button (Seat)**
    local methodButton1 = createButton(
        "MethodButton1", "Seat", toggleInvisibility,
        "Method: Seat\nTeleport to seat location and sit",
        {positionOffset = UDim2.new(1, buttonsFramePosition.X.Offset + buttonPosition.X.Offset, 0, buttonsFramePosition.Y.Offset + buttonPosition.Y.Offset + buttonSize.Y.Offset/2 + 35), size = UDim2.new(0, 180, 0, 40)},
        buttonsFrame
    )
    methodButton1.Position = UDim2.new(0, 10, 0, 190)


    -- **Noclip Button**
    local noclipButton = createButton(
        "NoclipButton", "Noclip " .. (noclip_enabled and "Off" or "On"), toggleNoclip,
        "Toggle Noclip\nNoclip is currently " .. (noclip_enabled and "Disabled" or "Enabled") .. "\nPress N to toggle",
        {positionOffset = UDim2.new(1, buttonsFramePosition.X.Offset + buttonPosition.X.Offset, 0, buttonsFramePosition.Y.Offset + buttonPosition.Y.Offset + buttonSize.Y.Offset/2 + 35), size = UDim2.new(0, 200, 0, 50)},
        buttonsFrame
    )
    noclipButton.Position =  UDim2.new(0, 70, 0, 190)


    -- **Walk Speed Boost Button - MOVED RIGHT TO MAKE SPACE**
    local walkSpeedBoostButton = createButton(
        "WalkSpeedBoostButton", "Speed Boost " .. (walkspeed_boost_enabled and "On" or "Off"), toggleWalkSpeedBoost,
        "Toggle Speed Boost\nWalk Speed Boost is currently " .. (walkspeed_boost_enabled and "Enabled" or "Disabled") .. "\nPress B to toggle",
        {positionOffset = UDim2.new(1, buttonsFramePosition.X.Offset + buttonPosition.X.Offset, 0, buttonsFramePosition.Y.Offset + buttonPosition.Y.Offset + buttonSize.Y.Offset/2 + 35), size = UDim2.new(0, 230, 0, 60)},
        buttonsFrame
    )
    walkSpeedBoostButton.Position = UDim2.new(0, 190, 0, 190) -- Moved further right


    -- **Generic Speed Button (NEW)**
    local genericSpeedButton = createButton(
        "GenericSpeedButton", "Set Speed", setGenericSpeed,
        "Set Walk Speed\nEnter desired speed in textbox to the right",
        {positionOffset = UDim2.new(1, buttonsFramePosition.X.Offset + buttonPosition.X.Offset, 0, buttonsFramePosition.Y.Offset + buttonPosition.Y.Offset + buttonSize.Y.Offset/2 + 35), size = UDim2.new(0, 200, 0, 50)},
        buttonsFrame
    )
    genericSpeedButton.Position = UDim2.new(0, 130, 0, 190) -- Positioned to the left of textbox


    -- **Generic Speed Textbox (NEW)**
    local genericSpeedTextBox = Instance.new("TextBox")
    genericSpeedTextBox.Parent = buttonsFrame
    genericSpeedTextBox.Name = "GenericSpeedTextBox"
    genericSpeedTextBox.Size = UDim2.new(0, 60, 0, 25)
    genericSpeedTextBox.Position = UDim2.new(0, 130 + 60 + 5, 0, 187) -- Positioned to the right of "Set Speed" button
    genericSpeedTextBox.Font = Enum.Font.SourceSansBold
    genericSpeedTextBox.TextSize = textBoxTextSize
    genericSpeedTextBox.PlaceholderText = "Speed"
    genericSpeedTextBox.ClearTextOnFocus = false
    genericSpeedTextBox.BackgroundColor3 = Color3.fromRGB(60, 60, 60)
    genericSpeedTextBox.BackgroundTransparency = 0.5
    genericSpeedTextBox.TextColor3 = Color3.new(1, 1, 1)
    genericSpeedTextBox.BorderSizePixel = 0
    genericSpeedTextBox.ClipsDescendants = true
    genericSpeedTextBox.Text = tostring(generic_speed_value)


    -- **Keybinds TextBox - MOVED ABOVE SUMMON BUTTON, FULL WIDTH**
    local keybindsTextBox = Instance.new("TextBox")
    keybindsTextBox.Parent = buttonsFrame
    keybindsTextBox.Name = "KeybindsTextBox"
    keybindsTextBox.Size = UDim2.new(0, 260, 0, 30)
    keybindsTextBox.Position = UDim2.new(0.5, 0, 1, -40)
    keybindsTextBox.AnchorPoint = Vector2.new(0.5, 1)
    keybindsTextBox.Font = Enum.Font.SourceSansBold
    keybindsTextBox.TextSize = textBoxTextSize
    keybindsTextBox.PlaceholderText = "Click to Edit Keybinds (Z,K,N,B,L)"
    keybindsTextBox.ClearTextOnFocus = false
    keybindsTextBox.BackgroundColor3 = Color3.fromRGB(60, 60, 60)
    keybindsTextBox.BackgroundTransparency = 0.5
    keybindsTextBox.TextColor3 = Color3.new(1, 1, 1)
    keybindsTextBox.BorderSizePixel = 0
    keybindsTextBox.ClipsDescendants = true
    keybindsTextBox.Text = table.concat({keybinds.toggle_invis.Name, keybinds.toggle_ui_hide.Name, keybinds.toggle_noclip.Name, keybinds.toggle_walkspeed_boost.Name, keybinds.load_ui.Name}, ",")


    local uicorner_keybindsTextBox = Instance.new("UICorner")
    uicorner_keybindsTextBox.Parent = keybindsTextBox
    uicorner_keybindsTextBox.CornerRadius = UDim.new(0.1, 0)


    -- **Summon UI Button**
    local summonUIButton = Instance.new("TextButton")
    summonUIButton.Parent = buttonsFrame
    summonUIButton.Name = "SummonUIButton"
    summonUIButton.Size = UDim2.new(0, 120, 0, 30)
    summonUIButton.Position = UDim2.new(0.5, 0, 1, 0)
    summonUIButton.AnchorPoint = Vector2.new(0.5, 1)
    summonUIButton.Font = Enum.Font.SourceSansBold
    summonUIButton.Text = "Okay - Reload UI"
    summonUIButton.TextColor3 = Color3.new(1, 1, 1)
    summonUIButton.BackgroundColor3 = Color3.fromRGB(90, 140, 90)
    summonUIButton.BackgroundTransparency = 0.5
    summonUIButton.BorderSizePixel = 0
    summonUIButton.AutoButtonColor = false
    summonUIButton.ClipsDescendants = true
    summonUIButton.Visible = false
    summonUIButton.TextSize = buttonTextSize
    summonUIButton.MouseEnter:Connect(function() summonUIButton.BackgroundColor3 = Color3.fromRGB(130, 180, 130) end)
    summonUIButton.MouseLeave:Connect(function() summonUIButton.BackgroundColor3 = Color3.fromRGB(90, 140, 90) end)


    local uicorner_summonUI = Instance.new("UICorner")
    uicorner_summonUI.Parent = summonUIButton
    uicorner_summonUI.CornerRadius = UDim.new(0.2, 0)


    -- **"How does it work?" Button**
    local howDoesItWorkLabel = Instance.new("TextButton")
    howDoesItWorkLabel.Parent = screenGui
    howDoesItWorkLabel.Name = "HowDoesItWorkButton"
    howDoesItWorkLabel.Size = UDim2.new(0, 25, 0, 25)
    howDoesItWorkLabel.Position = UDim2.new(1, buttonsFramePosition.X.Offset + hideUIButton.Position.X.Offset - methodButtonSpacingX + 5, 0, 15)
    howDoesItWorkLabel.Font = Enum.Font.SourceSansBold
    howDoesItWorkLabel.Text = "?"
    howDoesItWorkLabel.TextColor3 = Color3.new(0,0,0)
    howDoesItWorkLabel.BackgroundColor3 = Color3.fromRGB(180, 180, 180)
    howDoesItWorkLabel.BackgroundTransparency = 0.5
    howDoesItWorkLabel.BorderSizePixel = 0
    howDoesItWorkLabel.AutoButtonColor = false
    howDoesItWorkLabel.ClipsDescendants = true
    howDoesItWorkLabel.TextSize = buttonTextSize
    howDoesItWorkLabel.MouseEnter:Connect(function() howDoesItWorkLabel.BackgroundColor3 = Color3.fromRGB(220, 220, 220) end)
    howDoesItWorkLabel.MouseLeave:Connect(function() howDoesItWorkLabel.BackgroundColor3 = Color3.fromRGB(180, 180, 180) end)


    local uicorner_howDoesItWork = Instance.new("UICorner")
    uicorner_howDoesItWork.Parent = howDoesItWorkLabel
    uicorner_howDoesItWork.CornerRadius = UDim.new(1, 0)


    -- **"More will come" Label**
    local moreWillComeLabel = Instance.new("TextLabel")
    moreWillComeLabel.Parent = screenGui
    moreWillComeLabel.Name = "MoreWillComeLabel"
    moreWillComeLabel.Size = moreWillComeLabelSize
    moreWillComeLabel.Position = UDim2.new(0.5, 0, 1, moreWillComeLabelYOffset)
    moreWillComeLabel.AnchorPoint = Vector2.new(0.5, 1)
    moreWillComeLabel.BackgroundColor3 = Color3.fromRGB(60, 60, 60)
    moreWillComeLabel.BackgroundTransparency = 0.5
    moreWillComeLabel.BorderSizePixel = 0
    moreWillComeLabel.Font = Enum.Font.SourceSansBold
    moreWillComeLabel.TextSize = labelTextSize
    moreWillComeLabel.TextColor3 = Color3.new(1, 1, 1)
    moreWillComeLabel.Text = "More will come..."
    moreWillComeLabel.TextXAlignment = "Center"
    moreWillComeLabel.TextYAlignment = "Center"
    local uicorner_moreWillCome = Instance.new("UICorner")
    uicorner_moreWillCome.Parent = moreWillComeLabel
    uicorner_moreWillCome.CornerRadius = UDim.new(0.1, 0)


    -- **Tooltip Labels**
    local tooltipLabel = createTooltip(screenGui, "Toggle Invisibility\n(Current Method: Seat)\nPress Z to toggle", UDim2.new(1, buttonsFramePosition.X.Offset + buttonPosition.X.Offset, 0, buttonsFramePosition.Y.Offset + buttonPosition.Y.Offset + buttonSize.Y.Offset/2 + 35), UDim2.new(0, 200, 0, 50), "InvisTooltip")
    local tooltipLabel_unload = createTooltip(screenGui, "Unload All & Reset\nClick to Remove EVERYTHING", UDim2.new(1, buttonsFramePosition.X.Offset + buttonPosition.X.Offset, 0, buttonsFramePosition.Y.Offset + buttonPosition.Y.Offset + buttonSize.Y.Offset/2 + 35), UDim2.new(0, 220, 0, 40), "UnloadTooltip")
    local tooltipLabel_debug = createTooltip(screenGui, "Toggle Debug Mode\nEnable/Disable Debug Prints\nCurrent: " .. (DEBUG_MODE and "Enabled" or "Disabled"), UDim2.new(1, buttonsFramePosition.X.Offset + buttonPosition.X.Offset, 0, buttonsFramePosition.Y.Offset + buttonPosition.Y.Offset + buttonSize.Y.Offset/2 + 35), UDim2.new(0, 180, 0, 40), "DebugTooltip")
    local tooltipLabel_hideUI = createTooltip(screenGui, "Hide/Show UI\nUI is now Enabled\nPress K to hide/show", UDim2.new(1, buttonsFramePosition.X.Offset + buttonPosition.X.Offset, 0, buttonsFramePosition.Y.Offset + buttonPosition.Y.Offset + buttonSize.Y.Offset/2 + 35), UDim2.new(0, 200, 0, 40), "HideUITooltip")
    local tooltipLabel_method1 = createTooltip(screenGui, "Method: Seat\nTeleport to seat location and sit", UDim2.new(1, buttonsFramePosition.X.Offset + buttonPosition.X.Offset, 0, buttonsFramePosition.Y.Offset + buttonPosition.Y.Offset + buttonSize.Y.Offset/2 + 35), UDim2.new(0, 180, 0, 40), "Method1Tooltip")
    local tooltipLabel_noclip = createTooltip(screenGui, "Toggle Noclip\nNoclip is currently " .. (noclip_enabled and "Disabled" or "Enabled") .. "\nPress N to toggle", UDim2.new(1, buttonsFramePosition.X.Offset + buttonPosition.X.Offset, 0, buttonsFramePosition.Y.Offset + buttonPosition.Y.Offset + buttonSize.Y.Offset/2 + 35), UDim2.new(0, 200, 0, 50), "NoclipTooltip")
    local tooltipLabel_walkSpeedBoost = createTooltip(screenGui, "Toggle Speed Boost\nWalk Speed Boost is currently " .. (walkspeed_boost_enabled and "Enabled" or "Disabled") .. "\nPress B to toggle", UDim2.new(1, buttonsFramePosition.X.Offset + buttonPosition.X.Offset, 0, buttonsFramePosition.Y.Offset + buttonPosition.Y.Offset + buttonSize.Y.Offset/2 + 35), UDim2.new(0, 230, 0, 60), "WalkSpeedBoostTooltip")
    local tooltipLabel_keybindsTextBox = createTooltip(screenGui, "Edit Keybinds Here\nEnter key codes separated by commas (e.g., Z,K,N,B,L). Press Enter to apply.", UDim2.new(0.5, 0, 1, keybindsTextBox.Position.Y.Offset + 20), UDim2.new(0, 250, 0, 50), "KeybindsTextBoxTooltip")
    local tooltipLabel_speedTextBox = createTooltip(screenGui, "Enter a number to set the speed for Method 1 (Seat).\nHigher number might mean faster action.",  UDim2.new(0, speedTextBox.Position.X.Offset, 0, speedTextBox.Position.Y.Offset + 20), UDim2.new(0, 220, 0, 50), "SpeedTextBoxTooltip")
    local tooltipLabel_genericSpeedButton = createTooltip(screenGui, "Set Walk Speed\nClick to apply the speed value entered in the textbox to the right.",  UDim2.new(1, genericSpeedButton.Position.X.Offset, 0, genericSpeedButton.Position.Y.Offset + 20), UDim2.new(0, 250, 0, 50), "GenericSpeedButtonTooltip")
    local tooltipLabel_genericSpeedTextBox = createTooltip(screenGui, "Enter a number for walk speed and click 'Set Speed' to apply.\nDefault speed is 16.",  UDim2.new(0, genericSpeedTextBox.Position.X.Offset, 0, genericSpeedTextBox.Position.Y.Offset + 20), UDim2.new(0, 250, 0, 50), "GenericSpeedTextBoxTooltip")
    local tooltipLabel_ghostSpeedButton = createTooltip(screenGui, "Toggle Ghost Speed\nBoost walk speed when invisibility is enabled\nGhost Speed is currently Disabled", UDim2.new(1, buttonsFramePosition.X.Offset + buttonPosition.X.Offset, 0, buttonsFramePosition.Y.Offset + buttonPosition.Y.Offset + buttonSize.Y.Offset/2 + 35), UDim2.new(0, 240, 0, 60), "WalkSpeedBoostTooltip") -- Re-use tooltip for now


    -- **Function to set character transparency**
    local function setCharacterTransparency(transparency)
        local character = player.Character
        if character then
            for _, part in pairs(character:GetDescendants()) do
                if part:IsA("BasePart") and part.Name ~= "HumanoidRootPart" then
                    part.Transparency = transparency
                end
            end
        end
    end


    -- **Function to toggle invisibility**
    local function toggleInvisibility()
        if not invis_enabled then return end
        buttonClickSound:Play()
        invis_on = not invis_on
        if DEBUG_MODE then
            print("Toggling Invisibility - invis_on is now: " .. tostring(invis_on) .. ", Method: " .. current_method)
        end

        if invis_on then
            if current_method == 1 then -- Method 1: Seat
                setCharacterTransparency(0.75)
                invisButton.Text = "üëª"
                tooltipLabel.Text = "Invisibility Enabled\n(Current Method: Seat)\nPress Z to toggle"

                local character = player.Character
                if character then
                    if DEBUG_MODE then print("toggleInvisibility: Character found: ", character.Name) end
                    local humanoidRootPart = character:FindFirstChild("HumanoidRootPart")
                    if humanoidRootPart then
                        if DEBUG_MODE then print("toggleInvisibility: HumanoidRootPart found: ", humanoidRootPart.Name) end
                        local savedpos = humanoidRootPart.CFrame
                        if DEBUG_MODE then print("toggleInvisibility Method 1: Speed is now", method1_speed) end
                        wait(0.05 / method1_speed)
                        character:MoveTo(seatTeleportPosition)
                        wait(0.05 / method1_speed)

                        if character.HumanoidRootPart.Position.Y < voidLevelYThreshold then
                            print("Warning: Player fell into void after teleport! Returning to original position.")
                            character:MoveTo(savedpos)
                            game.StarterGui:SetCore("SendNotification", {
                                Title = "Invis Failed (Void)";
                                Duration = 3;
                                Text = "Teleport to seat failed - void detected. Returned to start.";
                            })
                            invis_on = false -- Revert invis state
                            invisButton.Text = "‚úÖ"
                            tooltipLabel.Text = "Toggle Invisibility\n(Current Method: Seat)\nPress Z to toggle"
                            setCharacterTransparency(0) -- Make sure character is visible again
                            return -- Stop the rest of the invisibility process
                        end


                        local Seat = Instance.new('Seat', game.Workspace)
                        Seat.Anchored = false
                        Seat.CanCollide = false
                        Seat.Name = 'invischair'
                        Seat.Transparency = 1
                        Seat.Position = seatTeleportPosition
                        local Weld = Instance.new("Weld", Seat)
                        Weld.Part0 = Seat
                        local torso = character:FindFirstChild("Torso") or character:FindFirstChild("UpperTorso")
                        if torso then
                            if DEBUG_MODE then print("toggleInvisibility: Torso found: ", torso.Name) end
                            Weld.Part1 = torso
                            wait()
                            Seat.CFrame = savedpos
                            currentSeatPosition = Seat.Position
                            startSeatReturnHeartbeat()
                            game.StarterGui:SetCore("SendNotification", {
                                Title = "Invis Enabled (Seat)";
                                Duration = 1;
                                Text = "Method: Seat - Character semi-transparent & teleported to seat";
                            })
                        else
                            warn("Torso or UpperTorso not found for welding Seat!")
                            Seat:Destroy()
                            currentSeatPosition = nil
                            stopSeatReturnHeartbeat()
                            game.StarterGui:SetCore("SendNotification", {
                                Title = "Invis Enabled (Seat - No Torso)";
                                Duration = 1;
                                Text = "Method: Seat - Character semi-transparent, but Torso missing for seat.";
                            })
                            warn("HumanoidRootPart not found for LocalPlayer's Character!")
                            currentSeatPosition = nil
                            stopSeatReturnHeartbeat()
                            game.StarterGui:SetCore("SendNotification", {
                                Title = "Invis Enabled (Seat - No RootPart)";
                                Duration = 1;
                                Text = "Method: Seat - Character semi-transparent, but teleport failed (no RootPart).";
                            })
                        end
                    else
                        warn("Character not found for LocalPlayer during Invis On!")
                        currentSeatPosition = nil
                        stopSeatReturnHeartbeat()
                        game.StarterGui:SetCore("SendNotification", {
                            Title = "Invis Enabled (Seat - Failed)";
                            Duration = 1;
                            Text = "Method: Seat - Invisibility ON failed. Character not found.";
                        })
                    end
                end
            end
        else -- Invis Off (Cleanup)
            setCharacterTransparency(0)
            invisButton.Text = "‚úÖ"
            tooltipLabel.Text = "Toggle Invisibility\n(Current Method: Seat)\nPress Z to toggle"

            if workspace:FindFirstChild('invischair') then
                workspace:FindFirstChild('invischair'):Destroy()
                if DEBUG_MODE then print("toggleInvisibility: invischair destroyed") end
            end
            if workspace:FindFirstChild('InvisBoxMethod2') then
                workspace:FindFirstChild('InvisBoxMethod2'):Destroy()
                 if DEBUG_MODE then print("toggleInvisibility: InvisBoxMethod2 destroyed") end
            end
            stopSeatReturnHeartbeat()
            currentSeatPosition = nil
            setGhostSpeed(false)


            game.StarterGui:SetCore("SendNotification", {
                Title = "Invis Disabled";
                Duration = 1;
                Text = "Character is now fully visible";
            })
        end
    end


    -- **Function to toggle Noclip - IMPROVED with Character.CanCollide**
    local function toggleNoclip()
        buttonClickSound:Play()
        noclip_enabled = not noclip_enabled
        if DEBUG_MODE then
            print("Toggling Noclip - noclip_enabled is now: " .. tostring(noclip_enabled))
        end

        noclipButton.Text = "Noclip " .. (noclip_enabled and "Off" or "On")
        tooltipLabel_noclip.Text = "Toggle Noclip\nNoclip is currently " .. (noclip_enabled and "Disabled" or "Enabled") .. "\nPress N to toggle"

        local character = player.Character
        if character then
            for _, part in pairs(character:GetDescendants()) do
                if part:IsA("BasePart") then
                    part.CanCollide = not noclip_enabled
                end
            end

            game.StarterGui:SetCore("SendNotification", {
                Title = "Noclip Toggled";
                Duration = 1;
                Text = "Noclip is now " .. (noclip_enabled and "ENABLED" or "DISABLED");
            })
        else
            warn("Character not found to toggle Noclip!")
            game.StarterGui:SetCore("SendNotification", {
                Title = "Noclip Failed";
                Duration = 1;
                Text = "Noclip toggle failed - Character not found.";
            })
        end
    end


    -- **Function to Set Generic Walk Speed (NEW)**
    local function setGenericSpeed()
        buttonClickSound:Play()
        local textInput = genericSpeedTextBox.Text
        local speedValue = tonumber(textInput)

        if speedValue then
            generic_speed_value = speedValue
            local humanoid = player.Character and player.Character:FindFirstChildOfClass("Humanoid")
            if humanoid then
                humanoid.WalkSpeed = generic_speed_value
                 game.StarterGui:SetCore("SendNotification", {
                    Title = "Walk Speed Set";
                    Duration = 1;
                    Text = "Walk Speed set to: " .. generic_speed_value;
                })
                if DEBUG_MODE then print("GenericSpeedButton: Walk Speed updated to", generic_speed_value) end
            else
                warn("Humanoid not found to set WalkSpeed!")
                game.StarterGui:SetCore("SendNotification", {
                    Title = "Walk Speed Failed";
                    Duration = 1;
                    Text = "Failed to set walk speed - Humanoid not found.";
                })
            end

        else
            genericSpeedTextBox.Text = tostring(generic_speed_value) -- Revert textbox to last valid speed
            game.StarterGui:SetCore("SendNotification", {
                Title = "Invalid Speed Input";
                Duration = 2;
                Text = "Please enter a valid number for speed. Reverted to: " .. generic_speed_value;
            })
            if DEBUG_MODE then print("GenericSpeedButton: Invalid input - Reverted to default speed", generic_speed_value) end
        end
    end


    -- **[NEW] Function to Set Ghost Speed (Boost when Invisible)**
    local function setGhostSpeed(enabled)
        ghost_speed_enabled = enabled
        local humanoid = player.Character and player.Character:FindFirstChildOfClass("Humanoid")
        if humanoid then
            if enabled and invis_on then -- Only boost if ghost speed and invis are ON
                humanoid.WalkSpeed = 40 -- Boosted speed for ghost mode
                ghostSpeedButton.Text = "Ghost Speed On"
                tooltipLabel_ghostSpeedButton.Text = "Toggle Ghost Speed\nBoost walk speed when invisibility is enabled\nGhost Speed is currently Enabled" -- Update tooltip
            else
                humanoid.WalkSpeed = walkspeed_boost_enabled and 32 or generic_speed_value -- Revert to normal boost or generic speed
                ghostSpeedButton.Text = "Ghost Speed Off"
                tooltipLabel_ghostSpeedButton.Text = "Toggle Ghost Speed\nBoost walk speed when invisibility is enabled\nGhost Speed is currently Disabled" -- Update tooltip
            end
        end
    end


    -- **Function to toggle Walk Speed Boost**
    local function toggleWalkSpeedBoost()
        if not walkspeed_boost_enabled then return end
        buttonClickSound:Play()
        walkspeed_boost_enabled = not walkspeed_boost_enabled
        if DEBUG_MODE then
            print("Toggling Walk Speed Boost - walkspeed_boost_enabled is now: " .. tostring(walkspeed_boost_enabled))
        end

        walkSpeedBoostButton.Text = "Speed Boost " .. (walkspeed_boost_enabled and "On" or "Off")
        tooltipLabel_walkSpeedBoost.Text = "Toggle Speed Boost\nWalk Speed Boost is currently " .. (walkspeed_boost_enabled and "Enabled" or "Disabled") .. "\nPress B to toggle"

        local humanoid = player.Character and player.Character:FindFirstChildOfClass("Humanoid")
        if humanoid then
            -- Apply boosted speed OR revert to generic speed when boost is off
            humanoid.WalkSpeed = walkspeed_boost_enabled and 32 or generic_speed_value
            game.StarterGui:SetCore("SendNotification", {
                Title = "Walk Speed Boost Toggled";
                Duration = 1;
                Text = "Walk Speed Boost is now " .. (walkspeed_boost_enabled and "ENABLED" or "DISABLED");
            })
            setGhostSpeed(ghost_speed_enabled) -- Re-apply ghost speed in case it was active
        else
            warn("Humanoid not found to toggle WalkSpeedBoost!")
            game.StarterGui:SetCore("SendNotification", {
                Title = "Walk Speed Boost Failed";
                Duration = 1;
                Text = "Walk Speed Boost toggle failed - Humanoid not found.";
            })
        end
    end


    -- **Function to UNLOAD the UI and reset**
    local function unloadInvisUI()
        buttonClickSound:Play()
        if DEBUG_MODE then print("UnloadInvisUI: Unloading UI and resetting...") end

        -- **[DEBUG PRINT - Unload Start]**
        if DEBUG_MODE then print("UnloadInvisUI: Starting unload process...") end


        -- Reset all toggles to OFF and update UI if needed
        invis_on = false
        noclip_enabled = false
        fake_character_enabled = false
        walkspeed_boost_enabled = false
        DEBUG_MODE = false
        keybinds_enabled_state = true
        generic_speed_value = 16
        InvisScriptLoaded = false
        ghost_speed_enabled = false


        invisButton.Text = "‚úÖ"
        noclipButton.Text = "Noclip Off"
        fakeCharacterButton.Text = "Fake Char Off"
        walkSpeedBoostButton.Text = "Speed Boost Off"
        debugButton.BackgroundColor3 = Color3.fromRGB(220, 220, 0)
        tooltipLabel_debug.Text = "Toggle Debug Mode\nEnable/Disable Debug Prints\nCurrent: Disabled"
        tooltipLabel_noclip.Text = "Toggle Noclip\nNoclip is currently Disabled\nPress N to toggle"
        tooltipLabel_fakeCharacter.Text = "Toggle Fake Character\nFake Character is currently Disabled\nPress N to toggle"
        tooltipLabel_walkSpeedBoost.Text = "Toggle Speed Boost\nWalk Speed Boost is currently Disabled\nPress B to toggle"
        tooltipLabel.Text = "Toggle Invisibility\n(Current Method: Seat)\nPress Z to toggle"
        tooltipLabel_hideUI.Text = "Hide/Show UI\nUI is now Disabled\nPress K to show"
        genericSpeedTextBox.Text = tostring(generic_speed_value)
        ghostSpeedButton.Text = "Ghost Speed Off"


        -- **[DEBUG PRINT - Before Destroy UI]**
        if DEBUG_MODE then print("UnloadInvisUI: Before destroying UI elements...") end


        setCharacterTransparency(0)
        stopSeatReturnHeartbeat()
        setGhostSpeed(false)


        if fakeCharacterModel then
            if DEBUG_MODE then print("UnloadInvisUI: Destroying fakeCharacterModel") end
            if fakeCharacterModel:IsDescendantOf(game.Workspace) then
                fakeCharacterModel:Destroy()
            else
                if DEBUG_MODE then print("UnloadInvisUI: fakeCharacterModel not in Workspace, skipping destroy.") end
        end
        fakeCharacterModel = nil
    end
    if workspace:FindFirstChild('invischair') then
        if DEBUG_MODE then print("UnloadInvisUI: Destroying invischair") end
        local invischair = workspace:FindFirstChild('invischair')
        if invischair then
            invischair:Destroy()
        else
            if DEBUG_MODE then print("UnloadInvisUI: invischair not found in Workspace, skipping destroy.") end
        end

    end
    if screenGui then
        if DEBUG_MODE then print("UnloadInvisUI: Destroying screenGui") end
        if screenGui:IsDescendantOf(player.PlayerGui) then
            screenGui:Destroy()
        else
            if DEBUG_MODE then print("UnloadInvisUI: screenGui not in PlayerGui, skipping destroy.") end
        end
        screenGui = nil
    end

    -- **[DEBUG PRINT - Unload Complete]**
        if DEBUG_MODE then print("UnloadInvisUI: Unload process completed.") end


    game.StarterGui:SetCore("SendNotification", {
        Title = "Invis UI Unloaded";
        Duration = 2;
        Text = "UI and all features have been unloaded and reset.";
    })
end


-- **Event Listeners - Button Clicks**
invisButton.MouseButton1Click:Connect(toggleInvisibility)
unloadButton.MouseButton1Click:Connect(unloadInvisUI)
debugButton.MouseButton1Click:Connect(toggleDebugMode)
hideUIButton.MouseButton1Click:Connect(toggleUIHide)
methodButton1.MouseButton1Click:Connect(toggleInvisibility)
noclipButton.MouseButton1Click:Connect(toggleNoclip)
walkSpeedBoostButton.MouseButton1Click:Connect(toggleWalkSpeedBoost)
genericSpeedButton.MouseButton1Click:Connect(setGenericSpeed)
summonUIButton.MouseButton1Click:Connect(loadInvisUI)


    -- **[NEW] Ghost Speed Button - MOVED UP AND FUNCTIONALITY ADDED!**
    local ghostSpeedButton = createButton(
        "GhostSpeedButton", "Ghost Speed Off", function() -- **[UPDATED] Function to toggle Ghost Speed**
            setGhostSpeed(not ghost_speed_enabled) -- Toggle the state
        end,
        "Toggle Ghost Speed\nBoost walk speed when invisibility is enabled\nGhost Speed is currently Disabled",
        {positionOffset = UDim2.new(1, buttonsFramePosition.X.Offset + buttonPosition.X.Offset, 0, buttonsFramePosition.Y.Offset + buttonPosition.Y.Offset + buttonSize.Y.Offset/2 + 35), size = UDim2.new(0, 240, 0, 60)},
        buttonsFrame
    )
    ghostSpeedButton.Position = UDim2.new(0, 190, 0, 250 - 85) -- **[UPDATED] Moved UP AGAIN - Now even higher**
    ghostSpeedButton.TextSize = 12

    -- **[UPDATED and MOVED to the END of loadInvisUI function] - Initial Button Text Setup for Ghost Speed Button**
    -- setGhostSpeed(ghost_speed_enabled) -- This line is now MOVED BELOW


    -- **Event Listener for Method 1 Speed Textbox - Input Validation and Update**
    speedTextBox.FocusLost:Connect(function(enterPressed)
        local textInput = speedTextBox.Text
        local speedValue = tonumber(textInput)

        if speedValue then
            method1_speed = speedValue
            if DEBUG_MODE then print("Speed Textbox: Method 1 Speed updated to", method1_speed) end
             game.StarterGui:SetCore("SendNotification", {
                Title = "Method 1 Speed Updated";
                Duration = 1;
                Text = "Method 1 (Seat) Speed set to: " .. method1_speed;
            })
        else
            speedTextBox.Text = tostring(method1_speed)
            game.StarterGui:SetCore("SendNotification", {
                Title = "Invalid Speed Input";
                Duration = 2;
                Text = "Please enter a valid number for speed. Reverted to: " .. method1_speed;
            })
            if DEBUG_MODE then print("Speed Textbox: Invalid input - Reverted to default speed", method1_speed) end
        end
    end)

    -- **Event Listener for Generic Speed Textbox - Input Validation (FocusLost is enough, action is on button click)**
    genericSpeedTextBox.FocusLost:Connect(function(enterPressed)
        local textInput = genericSpeedTextBox.Text
        local speedValue = tonumber(textInput)

        if not speedValue then
            genericSpeedTextBox.Text = tostring(generic_speed_value) -- Revert textbox to last valid speed
            game.StarterGui:SetCore("SendNotification", {
                Title = "Invalid Speed Input";
                Duration = 2;
                Text = "Please enter a valid number for speed. Reverted to: " .. generic_speed_value;
            })
             if DEBUG_MODE then print("GenericSpeedTextBox: Invalid input - Reverted to default speed", generic_speed_value) end
        end
    end)


    -- **Event Listener for Keybinds TextBox - Apply Keybinds**
    keybindsTextBox.FocusLost:Connect(function(enterPressed)
        -- **[DEBUG PRINT - Keybinds FocusLost Start]**
        if DEBUG_MODE then print("KeybindsTextBox FocusLost: Function started") end

        local textInput = string.upper(keybindsTextBox.Text)
        if DEBUG_MODE then print("KeybindsTextBox FocusLost: Input Text:", textInput) end -- **[DEBUG PRINT]**

        local keys = {}
        for key in string.gmatch(textInput, "([^,]+)") do
            local keycode = Enum.KeyCode[key:gsub("%s+", "")]
            if keycode then
                table.insert(keys, keycode)
                if DEBUG_MODE then print("KeybindsTextBox FocusLost: Valid KeyCode found:", keycode.Name) end -- **[DEBUG PRINT]**
            else
                game.StarterGui:SetCore("SendNotification", {
                    Title = "Invalid Keybind";
                    Duration = 2;
                    Text = "Invalid key code: '" .. key .. "'. Please use valid KeyCodes (e.g., Z,K,N,B,L).";
                })
                if DEBUG_MODE then print("KeybindsTextBox FocusLost: Invalid key code entered:", key) end -- **[DEBUG PRINT]**
                return
            end
        end

        if #keys == 5 then
            keybinds.toggle_invis = keys[1]
            keybinds.toggle_ui_hide = keys[2]
            keybinds.toggle_noclip = keys[3]
            keybinds.toggle_walkspeed_boost = keys[4]
            keybinds.load_ui = keys[5]

            if DEBUG_MODE then print("KeybindsTextBox FocusLost: All keybinds updated:", keybinds) end -- **[DEBUG PRINT]**
            keybindsTextBox.Text = table.concat({keybinds.toggle_invis.Name, keybinds.toggle_ui_hide.Name, keybinds.toggle_noclip.Name, keybinds.toggle_walkspeed_boost.Name, keybinds.load_ui.Name}, ",")
            game.StarterGui:SetCore("SendNotification", {
                Title = "Keybinds Updated";
                Duration = 1;
                Text = "Keybinds updated successfully!";
            })
            if DEBUG_MODE then print("KeybindsTextBox FocusLost: Keybinds updated and UI Textbox updated") end -- **[DEBUG PRINT]**
        else
            game.StarterGui:SetCore("SendNotification", {
                Title = "Incorrect Keybinds Format";
                Duration = 2;
                Text = "Please enter exactly 5 valid KeyCodes separated by commas (e.g., Z,K,N,B,L).";
            })
            keybindsTextBox.Text = table.concat({keybinds.toggle_invis.Name, keybinds.toggle_ui_hide.Name, keybinds.toggle_noclip.Name, keybinds.toggle_walkspeed_boost.Name, keybinds.load_ui.Name}, ",")
            if DEBUG_MODE then print("KeybindsTextBox FocusLost: Incorrect number of keycodes entered") end -- **[DEBUG PRINT]**
        end
         -- **[DEBUG PRINT - Keybinds FocusLost End]**
        if DEBUG_MODE then print("KeybindsTextBox FocusLost: Function finished") end
    end)


    -- **Event Handling - Mouse Enter/Exit for Tooltips**
    invisButton.MouseEnter:Connect(function() tooltipLabel.Visible = true end)
    invisButton.MouseLeave:Connect(function() tooltipLabel.Visible = false end)
    unloadButton.MouseEnter:Connect(function() tooltipLabel_unload.Visible = true end)
    unloadButton.MouseLeave:Connect(function() tooltipLabel_unload.Visible = false end)
    debugButton.MouseEnter:Connect(function() tooltipLabel_debug.Visible = true end)
    debugButton.MouseLeave:Connect(function() tooltipLabel_debug.Visible = false end)
    hideUIButton.MouseEnter:Connect(function() tooltipLabel_hideUI.Visible = true end)
    hideUIButton.MouseLeave:Connect(function() tooltipLabel_hideUI.Visible = false end)
    methodButton1.MouseEnter:Connect(function() tooltipLabel_method1.Visible = true end)
    methodButton1.MouseLeave:Connect(function() tooltipLabel_method1.Visible = false end)
    noclipButton.MouseEnter:Connect(function() tooltipLabel_noclip.Visible = true end)
    noclipButton.MouseLeave:Connect(function() tooltipLabel_noclip.Visible = false end)
    walkSpeedBoostButton.MouseEnter:Connect(function() tooltipLabel_walkSpeedBoost.Visible = true end)
    walkSpeedBoostButton.MouseLeave:Connect(function() tooltipLabel_walkSpeedBoost.Visible = false end)
    keybindsTextBox.MouseEnter:Connect(function() tooltipLabel_keybindsTextBox.Visible = true end)
    keybindsTextBox.MouseLeave:Connect(function() tooltipLabel_keybindsTextBox.Visible = false end)
    speedTextBox.MouseEnter:Connect(function() tooltipLabel_speedTextBox.Visible = true end)
    speedTextBox.MouseLeave:Connect(function() tooltipLabel_speedTextBox.Visible = false end)
    genericSpeedButton.MouseEnter:Connect(function() tooltipLabel_genericSpeedButton.Visible = true end)
    genericSpeedButton.MouseLeave:Connect(function() tooltipLabel_genericSpeedButton.Visible = false end)
    genericSpeedTextBox.MouseEnter:Connect(function() tooltipLabel_genericSpeedTextBox.Visible = true end)
    genericSpeedTextBox.MouseLeave:Connect(function() tooltipLabel_genericSpeedTextBox.Visible = false end)
    ghostSpeedButton.MouseEnter:Connect(function() tooltipLabel_walkSpeedBoost.Visible = true end)
    ghostSpeedButton.MouseLeave:Connect(function() tooltipLabel_walkSpeedBoost.Visible = false end)


    -- **UserInputService KeyDown Event for Keybinds**
    userInputService.InputBegan:Connect(function(input, gameProcessedEvent)
        if gameProcessedEvent then return end
        if not keybinds_enabled_state then return end

        if input.KeyCode == keybinds.toggle_invis then
            toggleInvisibility()
        elseif input.KeyCode == keybinds.toggle_ui_hide then
            toggleUIHide()
        elseif input.KeyCode == keybinds.toggle_noclip then
            toggleNoclip()
        elseif input.KeyCode == keybinds.toggle_walkspeed_boost then
            toggleWalkSpeedBoost()
        elseif input.KeyCode == keybinds.load_ui then
            loadInvisUI()
        end
    end)

    summonUIButton.Visible = true
    game.StarterGui:SetCore("SendNotification", {
        Title = "Invis UI Loaded";
        Duration = 2;
        Text = "Invis UI loaded and ready!";
    })
    if DEBUG_MODE then print("LoadInvisUI: UI Loaded Successfully") end

    -- **[MOVED to here - VERY END of loadInvisUI function] - Initial Button Text Setup for Ghost Speed Button**
    setGhostSpeed(ghost_speed_enabled)
end


-- **Function to UNLOAD the UI and reset**
local function unloadInvisUI()
    buttonClickSound:Play()
    if DEBUG_MODE then print("UnloadInvisUI: Unloading UI and resetting...") end

    -- **[DEBUG PRINT - Unload Start]**
    if DEBUG_MODE then print("UnloadInvisUI: Starting unload process...") end

    -- Reset all toggles to OFF and update UI if needed
    invis_on = false
    noclip_enabled = false
    fake_character_enabled = false
    walkspeed_boost_enabled = false
    DEBUG_MODE = false
    keybinds_enabled_state = true
    generic_speed_value = 16
    InvisScriptLoaded = false
    ghost_speed_enabled = false


    invisButton.Text = "‚úÖ"
    noclipButton.Text = "Noclip Off"
    fakeCharacterButton.Text = "Fake Char Off"
    walkSpeedBoostButton.Text = "Speed Boost Off"
    debugButton.BackgroundColor3 = Color3.fromRGB(220, 220, 0)
    tooltipLabel_debug.Text = "Toggle Debug Mode\nEnable/Disable Debug Prints\nCurrent: Disabled"
    tooltipLabel_noclip.Text = "Toggle Noclip\nNoclip is currently Disabled\nPress N to toggle"
    tooltipLabel_fakeCharacter.Text = "Toggle Fake Character\nFake Character is currently Disabled\nPress N to toggle"
    tooltipLabel_walkSpeedBoost.Text = "Toggle Speed Boost\nWalk Speed Boost is currently Disabled\nPress B to toggle"
    tooltipLabel.Text = "Toggle Invisibility\n(Current Method: Seat)\nPress Z to toggle"
    tooltipLabel_hideUI.Text = "Hide/Show UI\nUI is now Disabled\nPress K to show"
    genericSpeedTextBox.Text = tostring(generic_speed_value)
    ghostSpeedButton.Text = "Ghost Speed Off"


    -- **[DEBUG PRINT - Before Destroy UI]**
    if DEBUG_MODE then print("UnloadInvisUI: Before destroying UI elements...") end


    setCharacterTransparency(0)
    stopSeatReturnHeartbeat()
    setGhostSpeed(false)


    if fakeCharacterModel then
        if DEBUG_MODE then print("UnloadInvisUI: Destroying fakeCharacterModel") end
        if fakeCharacterModel:IsDescendantOf(game.Workspace) then
            fakeCharacterModel:Destroy()
        else
            if DEBUG_MODE then print("UnloadInvisUI: fakeCharacterModel not in Workspace, skipping destroy.") end
        end
        fakeCharacterModel = nil
    end
    if workspace:FindFirstChild('invischair') then
        if DEBUG_MODE then print("UnloadInvisUI: Destroying invischair") end
        local invischair = workspace:FindFirstChild('invischair')
        if invischair then
            invischair:Destroy()
        else
            if DEBUG_MODE then print("UnloadInvisUI: invischair not found in Workspace, skipping destroy.") end
        end

    end
    if screenGui then
        if DEBUG_MODE then print("UnloadInvisUI: Destroying screenGui") end
        if screenGui:IsDescendantOf(player.PlayerGui) then
            screenGui:Destroy()
        else
            if DEBUG_MODE then print("UnloadInvisUI: screenGui not in PlayerGui, skipping destroy.") end
        end
        screenGui = nil
    end

    -- **[DEBUG PRINT - Unload Complete]**
        if DEBUG_MODE then print("UnloadInvisUI: Unload process completed.") end


    game.StarterGui:SetCore("SendNotification", {
        Title = "Invis UI Unloaded";
        Duration = 2;
        Text = "UI and all features have been unloaded and reset.";
    })
end


-- **Function to UNLOAD the UI and script when command is entered - REMOVED**
-- Removed handleUnloadCommand and PlayerChatted event listener


-- **Initial UI Load (if you want UI to load on game start, uncomment next line)**
loadInvisUI()
